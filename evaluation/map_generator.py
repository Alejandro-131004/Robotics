# -*- coding: utf-8 -*-
"""Código para map_generator.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qKbf-_jMd_R7RvvyqD8Eh_xm19ROJwiA
"""

import os
import numpy as np
import pickle
from environment.configuration import MAX_DIFFICULTY_STAGE, get_stage_parameters

def generate_maps(
    maps_output_dir: str = "evaluation/maps",
    num_maps_per_difficulty: int = 100,
    total_difficulty_stages: int = int(MAX_DIFFICULTY_STAGE)
) -> list:
    """
    Gera um conjunto de mapas de túneis para avaliação, guardando os seus parâmetros.
    Cada mapa é uma coleção de parâmetros (num_curves, angle_range, clearance_factor, num_obstacles)
    que definem um ambiente.

    Args:
        maps_output_dir (str): O diretório onde os mapas gerados serão guardados.
        num_maps_per_difficulty (int): O número de mapas a gerar para cada nível de dificuldade.
        total_difficulty_stages (int): O número total de níveis de dificuldade (ex: 10).

    Returns:
        list: Uma lista de caminhos para os ficheiros de mapa gerados.
    """
    print(f"--- Gerando {num_maps_per_difficulty * total_difficulty_stages} mapas ---")
    os.makedirs(maps_output_dir, exist_ok=True)

    map_files = []

    for difficulty_level in range(1, total_difficulty_stages + 1):
        print(f"Gerando {num_maps_per_difficulty} mapas para Dificuldade {difficulty_level}/{total_difficulty_stages}...")
        for i in range(num_maps_per_difficulty):
            # Obter os parâmetros do estágio usando a função de configuração
            num_curves, angle_range, clearance_factor, num_obstacles = \
                get_stage_parameters(float(difficulty_level), float(total_difficulty_stages))

            map_params = {
                "difficulty_level": difficulty_level,
                "num_curves": num_curves,
                "angle_range": angle_range,
                "clearance_factor": clearance_factor,
                "num_obstacles": num_obstacles
            }

            map_filename = os.path.join(maps_output_dir, f"map_D{difficulty_level}_N{i+1}.pkl")
            with open(map_filename, 'wb') as f:
                pickle.dump(map_params, f)
            map_files.append(map_filename)

    print(f"Geração de mapas concluída. {len(map_files)} mapas guardados em '{maps_output_dir}'.")
    return map_files

if __name__ == "__main__":
    # Exemplo de uso autónomo
    MAPS_OUTPUT_DIR = "evaluation/maps_standalone_test"
    NUM_MAPS_PER_DIFFICULTY = 10 # Apenas 10 mapas para teste rápido
    TOTAL_DIFFICULTY_STAGES = 2 # Apenas 2 dificuldades para teste rápido

    generated_map_files = generate_maps(
        maps_output_dir=MAPS_OUTPUT_DIR,
        num_maps_per_difficulty=NUM_MAPS_PER_DIFFICULTY,
        total_difficulty_stages=TOTAL_DIFFICULTY_STAGES
    )
    print(f"\nTeste autónomo de geração de mapas concluído. Mapas guardados em {MAPS_OUTPUT_DIR}")